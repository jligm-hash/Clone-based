Hd0_w = NULL
Hb0_w = NULL
Him0_w = NULL
w_flg = FALSE
if (ncol(data) >= 5) {
w_flg = TRUE
}
# Acquire gene name and Hallmark coefficient by function from definition file
for (i in 1:nrow(data)) {
if (data[i, 3] == "apoptosis") {
Ha0 = c(Ha0, as.character(data[i, 1]))
if (w_flg) {
Ha0_w = c(Ha0_w, as.numeric(as.character(data[i, 5])))
}
} else if (data[i, 3] == "immortalization") {
Hi0 = c(Hi0, as.character(data[i, 1]))
if (w_flg) {
Hi0_w = c(Hi0_w, as.numeric(as.character(data[i, 5])))
}
} else if (data[i, 3] == "anti-growth" | data[i, 3] == "growth") {
Hd0 = c(Hd0, as.character(data[i, 1]))
if (w_flg) {
Hd0_w = c(Hd0_w, as.numeric(as.character(data[i, 5])))
}
} else if (data[i, 3] == "angiogenesis") {
Hb0 = c(Hb0, as.character(data[i, 1]))
if (w_flg) {
Hb0_w = c(Hb0_w, as.numeric(as.character(data[i, 5])))
}
} else if (data[i, 3] == "invasion") {
Him0 = c(Him0, as.character(data[i, 1]))
if (w_flg) {
Him0_w = c(Him0_w, as.numeric(as.character(data[i, 5])))
}
}
}
Ha <<- match(Ha0, names)
notHa <<- setdiff(seq(1,length(names)),Ha)
Hi <<- match(Hi0, names)
Hd <<- match(Hd0, names)
Hb <<- match(Hb0, names)
Him <<- match(Him0, names)
# if there is no Hallmark coefficient then generate a Hallmark coefficient as a random number - beta distribution
if (!w_flg) {
if (length(Ha) > 0) {
Ha_rnd = 1:length(Ha)
} else {
Ha_rnd = c()
}
total0 = length(Ha)
if (length(Hi) > 0) {
Hi_rnd = (total0 + 1):(total0 + length(Hi))
} else {
Hi_rnd = c()
}
total0 = total0 + length(Hi)
if (length(Hd) > 0) {
Hd_rnd = (total0 + 1):(total0 + length(Hd))
} else {
Hd_rnd = c()
}
total0 = total0 + length(Hd)
if (length(Hb) > 0) {
Hb_rnd = (total0 + 1):(total0 + length(Hb))
} else {
Hb_rnd = c()
}
total0 = total0 + length(Hb)
if (length(Him) > 0) {
Him_rnd = (total0 + 1):(total0 + length(Him))
} else {
Him_rnd = c()
}
total = total0 + length(Him)
# random = runif(total)
random = rbeta(total, 0.01, 1)
Ha0_w = random[Ha_rnd]
Hi0_w = random[Hi_rnd]
Hd0_w = random[Hd_rnd]
Hb0_w = random[Hb_rnd]
Him0_w = random[Him_rnd]
}
# Total by genetic mode
Ha_sum = sum(Ha0_w)
Hi_sum = sum(Hi0_w)
Hd_sum = sum(Hd0_w)
Hb_sum = sum(Hb0_w)
Him_sum = sum(Him0_w)
Ha_w <<- Ha0_w/Ha_sum
Hi_w <<- Hi0_w/Hi_sum
Hd_w <<- Hd0_w/Hd_sum
Hb_w <<- Hb0_w/Hb_sum
Him_w <<- Him0_w/Him_sum
},
# Change the cell variables
# mode = 2 Corresponding (Hallmark) Gene Mode
updateClone = function(clone1, F) {
# Apoptosis
clone1$calcApoptosis()
clone1$Ha = sum(clone1$gene[Ha]*Ha_w)
clone1$a =  clone1$a - clone1$Ha
if (clone1$a < 0) {
clone1$a = 0
}
### TEST to set a = 0.5 to fix the probability
clone1$a = 0.5
# Not dead - Immortalized
clone1$Hi = sum(clone1$gene[Hi]*Hi_w)
clone1$i = 1 - clone1$Hi
if (clone1$i < 0) {
clone1$i = 0
}
# Angiogenesis
clone1$Hb = sum(clone1$gene[Hb]*Hb_w)
clone1$E = E0 / (1 + F * clone1$Hb)
clone1$Nmax = 1.0 / clone1$E
# Cancer gene, tumor suppressor gene
clone1$Hd = sum(clone1$gene[Hd]*Hd_w)
clone1$Him = sum(clone1$gene[Him]*Him_w)
### TEST to set d_0 = 1
clone1$d = 1.0   # d_0 = 1      # (1 - 0.25) * clone1$Hd + 0.25     # d_0 = 0.25
if (clone1$d > 1) {clone1$d = 1}
if (!clone1$invasion) {
clone1$d = clone1$d - clone1$E * env$N
if (clone1$d < 0) {clone1$d = 0}
}
# Invasion metastasis
if (!clone1$invasion) {
clone1$im = clone1$Him
} else {
clone1$im = 1
}
},
# Change the environment variables
updateEnviron = function(env, clones) {
sum_cell(env, clones)
# env$M = sum()  # ceiling(length(clones) * env$type)
# env$N = sum()  # length(clones)  - env$M
}
)
)
library(stringr)
source(file = "Code/tugHall_clone_functions_tests.R")
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-9       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0        # Environmental death probability
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
x <- 1
# For primary tumor cells:
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t,rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,1800), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,1900), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg")
x <- 1
# For metastasis cells:
xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
RP_AGAIN()
##########################################################################################
#### Analysis of the output data:
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "M", lg = "Number of cells", xl = c(0,105), yl = c(0,2000), nm1 = "Fig_3.jpg", nm2 = "Fig_4.jpg")
library(stringr)
source(file = "Code/tugHall_clone_functions_tests.R")
library(stringr)
source(file = "Code/tugHall_clone_functions_tests.R")
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-9       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0        # Environmental death probability
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
x <- 1
# For primary tumor cells:
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t,rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,1900), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg")
x <- 1
# For metastasis cells:
xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
RP_AGAIN()
##########################################################################################
#### Analysis of the output data:
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "M", lg = "Number of cells", xl = c(0,105), yl = c(0,2000), nm1 = "Fig_3.jpg", nm2 = "Fig_4.jpg")
library(stringr)
source(file = "Code/tugHall_clone_functions_tests.R")
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-9       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0        # Environmental death probability
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
censore_t <<- 2         # Max time where the program forcibly stops
x <- 1
# For primary tumor cells:
xz <- data.frame(V1=x,V2=as.character("APC,KRAS,TP53,PIK3A"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t,rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:1 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t,rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,1900), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,3), yl = c(0,1900), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg")
library(stringr)
source(file = "Code/tugHall_clone_functions_tests.R")
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-9       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0        # Environmental death probability
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
x <- 1
# For primary tumor cells:
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t,rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,1900), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg")
library(stringr)
source(file = "Code/tugHall_clone_functions_tests.R")
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-9       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0        # Environmental death probability
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
x <- 1
# For primary tumor cells:
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t,rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,1900), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg")
##########################################################################################
###  The simulation uses the functions and classes in the "Code/tugHall_functions.R"
library(stringr)
library(actuar)    # to use BIG NUMBERS in N_cell variable
source(file = "Code/tugHall_2.1_functions_tests.R")
## Create folders:  /Input, /Output and /Figures
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
##########################################################################################
### Files to output and input data
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
### Output/Weights.txt               # file with gene weights for hallmarks
##########################################################################################
# Probabilities of processes
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10          # parameter in the division probability
m0 <<-  1E-9       # mutation probability
uo <<- 0.5         # oncogene mutation probability
us <<- 0.5         # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0          # Environmental death probability
d0 <<-  1.0        # Initial probability to divide cells
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
##########################################################################################
# if you have a new format of gene file, please, use change of columns function like:
# genefile <- changeCol(genefile)
### Making of the input file for initial clones
x <- 1
#xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
##########################################################################################
### Simulation of the cancer cell/clone evolution:
# model(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t)
# To repeat the 100 simulations and to mesure the time difference
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t, d0, rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,100), yl = c(0,1800), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,75), yl = c(0,20000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
