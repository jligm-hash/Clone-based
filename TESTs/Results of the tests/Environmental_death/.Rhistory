E0 <<- 1E-4       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-12       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0.2        # Environmental death probability
d0 <<-  0.35   # Initial probability to divide cells
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
##########################################################################################
# if you have a new format of gene file, please, use change of columns function like:
# genefile <- changeCol(genefile)
### Making of the input file for initial clones
x <- 1
#xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
##########################################################################################
### Simulation of the cancer cell/clone evolution:
# model(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t)
# To repeat the 100 simulations and to mesure the time difference
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t, d0, rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,75), yl = c(0,1800), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,100), yl = c(0,1800), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
library(stringr)
library(actuar)    # to use BIG NUMBERS in N_cell variable
source(file = "Code/tugHall_2.1_functions_tests.R")
## Create folders:  /Input, /Output and /Figures
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
##########################################################################################
### Files to output and input data
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
### Output/Weights.txt               # file with gene weights for hallmarks
##########################################################################################
# Probabilities of processes
E0 <<- 1E-4       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-12       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0.2        # Environmental death probability
d0 <<-  0.35111111111   # Initial probability to divide cells
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
##########################################################################################
# if you have a new format of gene file, please, use change of columns function like:
# genefile <- changeCol(genefile)
### Making of the input file for initial clones
x <- 1
#xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
##########################################################################################
### Simulation of the cancer cell/clone evolution:
# model(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t)
# To repeat the 100 simulations and to mesure the time difference
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t, d0, rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,100), yl = c(0,1800), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
library(stringr)
library(actuar)    # to use BIG NUMBERS in N_cell variable
source(file = "Code/tugHall_2.1_functions_tests.R")
## Create folders:  /Input, /Output and /Figures
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
##########################################################################################
### Files to output and input data
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
### Output/Weights.txt               # file with gene weights for hallmarks
##########################################################################################
# Probabilities of processes
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-12       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0        # Environmental death probability
d0 <<-  1.0   # Initial probability to divide cells
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
##########################################################################################
# if you have a new format of gene file, please, use change of columns function like:
# genefile <- changeCol(genefile)
### Making of the input file for initial clones
x <- 1
#xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
##########################################################################################
### Simulation of the cancer cell/clone evolution:
# model(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t)
# To repeat the 100 simulations and to mesure the time difference
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t, d0, rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,100), yl = c(0,1800), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,1800), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,63), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
data_out <- read.csv("Output/cloneout.txt", sep="\t")
data_out[is.na(data_out)] <- ""
save_fig <- function(file_input) {
tck_w <- 0.03
file_input <- paste0(substr(file_input,1,nchar(file_input)-4),".jpg")
#dev.copy2eps(file = file_input, height = 10, width = 10)
dev.copy(jpeg,file_input, width = 10, height = 10, units = 'in', res = 300)
dev.off()
# par(xpd=TRUE, cex.lab=2, lwd = 2, mar = c(5, 5, 5, 5), tcl = 0.5, cex.axis = 1.75,  mgp = c(3, 0.6, 0))
par(cex.axis=1.3, cex.lab=1.6, cex=1.4, mar=c(5.1, 4.1, 2.1, 2.1), mgp=c(2.3, 0.3, 0),xpd=TRUE, tck = tck_w,font.lab = 2)
}
mT  <- max(data_out$Time)
mRP <- max(data_out$Repeat_number)
tck_w <- 0.03
par(cex.axis=1.3, cex.lab=1.6, cex=1.4, mar=c(5.1, 4.1, 2.1, 2.1), mgp=c(2.3, 0.3, 0),xpd=TRUE, tck = tck_w,font.lab = 2)
d_out <- data_out[[output]]
# plot(data_out$Time,d_out,type = "p",cex = 0.2)
if (  sum(d_out) == 0) { stop("There are all zero data, please, check input data !") }
data_ave <- matrix(data = 0, ncol = 2,nrow = mT + 1)
output = "N"
lg = "Number of cells"
nm1 = "Fig_1.jpg"
nm2 = "Fig_2.jpg"
mT  <- max(data_out$Time)
mRP <- max(data_out$Repeat_number)
tck_w <- 0.03
par(cex.axis=1.3, cex.lab=1.6, cex=1.4, mar=c(5.1, 4.1, 2.1, 2.1), mgp=c(2.3, 0.3, 0),xpd=TRUE, tck = tck_w,font.lab = 2)
d_out <- data_out[[output]]
# plot(data_out$Time,d_out,type = "p",cex = 0.2)
if (  sum(d_out) == 0) { stop("There are all zero data, please, check input data !") }
data_ave <- matrix(data = 0, ncol = 2,nrow = mT + 1)
for (k in 1:(mT+1)  ) {
data_ave[k,1] = k-1
n <- which(data_out$Time == (k-1) )
data_ave[k,2] = sum(d_out[n]) / mRP
}
plot(data_out$Time,d_out,type = "p",cex = 0.15, xlab = "Time step", ylab = lg, xlim = xl, ylim = yl)
xl = c(0,63)
yl = c(0,2000)
plot(data_out$Time,d_out,type = "p",cex = 0.15, xlab = "Time step", ylab = lg, xlim = xl, ylim = yl)
axis(3,tck = tck_w,labels = FALSE)
axis(4,tck = tck_w,labels = FALSE)
lines(data_ave[1:(mT+1),1],data_ave[1:(mT+1),2],type = "l",lwd = 3, col = "red", add = TRUE)
legend("top", c("100 simulations", "average value"), bty = "n", col = c("black","red"),
lty = c(NA,1),pch = c(1,NA),pt.cex = 0.15,lwd = c(NA,2.4), horiz = TRUE)
save_fig(paste0("Figures/",nm1) )
library(MASS)
df <- data.frame(x=data_out$Time,y=d_out)
# colors
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))
r <- rf(40)
# Adjust binning (interpolate - can be computationally intensive for large datasets)
k <- kde2d(df$x, df$y, n=c(300,300))
k$z <- k$z / max(k$z)
breaks <- 1:(length(r)+1)
breaks <- breaks / length(r)
for (i in 1:2) {
image.default(k, col=r, breaks = breaks, xlab = "Time step", ylab = lg, ylim = yl, xlim = xl, legend=TRUE)
# For each time step
for (kk in 1:(mT-1)) {
numb <- which( xor(df$x==kk,df$x==(kk+1)) )
h = ifelse( max(df$y[numb]) - min(df$y[numb]) > 0, max(df$y[numb]) - min(df$y[numb]), 1)
k <- kde2d(df$x[numb], df$y[numb], h = c(1,h), n=c(2,100))
k$z <- k$z / max(k$z)
breaks <- 1:(length(r)+1)
breaks <- breaks / length(r)
image(k, col=r, breaks = breaks, add = TRUE)
}
}
i<-1
image.default(k, col=r, breaks = breaks, xlab = "Time step", ylab = lg, ylim = yl, xlim = xl, legend=TRUE)
library(MASS)
df <- data.frame(x=data_out$Time,y=d_out)
# colors
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))
r <- rf(40)
# Adjust binning (interpolate - can be computationally intensive for large datasets)
k <- kde2d(df$x, df$y, n=c(300,300))
k$z <- k$z / max(k$z)
breaks <- 1:(length(r)+1)
breaks <- breaks / length(r)
image.default(k, col=r, breaks = breaks, xlab = "Time step", ylab = lg, ylim = yl, xlim = xl, legend=TRUE)
# For each time step
for (kk in 1:(mT-1)) {
numb <- which( xor(df$x==kk,df$x==(kk+1)) )
h = ifelse( max(df$y[numb]) - min(df$y[numb]) > 0, max(df$y[numb]) - min(df$y[numb]), 1)
k <- kde2d(df$x[numb], df$y[numb], h = c(1,h), n=c(2,100))
k$z <- k$z / max(k$z)
breaks <- 1:(length(r)+1)
breaks <- breaks / length(r)
image(k, col=r, breaks = breaks, add = TRUE)
}
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,60), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,55), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,45), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
if (mT > xl[2]) mT <- xl[2]
mT
mRP <- max(data_out$Repeat_number)
tck_w <- 0.03
par(cex.axis=1.3, cex.lab=1.6, cex=1.4, mar=c(5.1, 4.1, 2.1, 2.1), mgp=c(2.3, 0.3, 0),xpd=TRUE, tck = tck_w,font.lab = 2)
d_out <- data_out[[output]]
# plot(data_out$Time,d_out,type = "p",cex = 0.2)
if (  sum(d_out) == 0) { stop("There are all zero data, please, check input data !") }
data_ave <- matrix(data = 0, ncol = 2,nrow = mT + 1)
for (k in 1:(mT+1)  ) {
data_ave[k,1] = k-1
n <- which(data_out$Time == (k-1) )
data_ave[k,2] = sum(d_out[n]) / mRP
}
plot(data_out$Time,d_out,type = "p",cex = 0.15, xlab = "Time step", ylab = lg, xlim = xl, ylim = yl)
axis(3,tck = tck_w,labels = FALSE)
axis(4,tck = tck_w,labels = FALSE)
lines(data_ave[1:(mT+1),1],data_ave[1:(mT+1),2],type = "l",lwd = 3, col = "red", add = TRUE)
mT  <- max(data_out$Time)
if (mT > xl[2]) mT <- xl[2]
mRP <- max(data_out$Repeat_number)
tck_w <- 0.03
par(cex.axis=1.3, cex.lab=1.6, cex=1.4, mar=c(5.1, 4.1, 2.1, 2.1), mgp=c(2.3, 0.3, 0),xpd=TRUE, tck = tck_w,font.lab = 2)
d_out <- data_out[[output]]
# plot(data_out$Time,d_out,type = "p",cex = 0.2)
if (  sum(d_out) == 0) { stop("There are all zero data, please, check input data !") }
data_ave <- matrix(data = 0, ncol = 2,nrow = mT + 1)
for (k in 1:(mT+1)  ) {
data_ave[k,1] = k-1
n <- which(data_out$Time == (k-1) )
data_ave[k,2] = sum(d_out[n]) / mRP
}
wc <- which(data_out$Time <= mT)
plot(data_out$Time[wc],d_out[wc],type = "p",cex = 0.15, xlab = "Time step", ylab = lg, xlim = xl, ylim = yl)
axis(3,tck = tck_w,labels = FALSE)
axis(4,tck = tck_w,labels = FALSE)
lines(data_ave[1:(mT+1),1],data_ave[1:(mT+1),2],type = "l",lwd = 3, col = "red", add = TRUE)
legend("top", c("100 simulations", "average value"), bty = "n", col = c("black","red"),
lty = c(NA,1),pch = c(1,NA),pt.cex = 0.15,lwd = c(NA,2.4), horiz = TRUE)
save_fig(paste0("Figures/",nm1) )
library(MASS)
df <- data.frame(x=data_out$Time,y=d_out)
# colors
library(RColorBrewer)
rf <- colorRampPalette(rev(brewer.pal(11,'Spectral')))
r <- rf(40)
# Adjust binning (interpolate - can be computationally intensive for large datasets)
k <- kde2d(df$x, df$y, n=c(300,300))
k$z <- k$z / max(k$z)
breaks <- 1:(length(r)+1)
breaks <- 1:(length(r)+1)
breaks <- breaks / length(r)
for (i in 1:2) {
image.default(k, col=r, breaks = breaks, xlab = "Time step", ylab = lg, ylim = yl, xlim = xl, legend=TRUE)
# For each time step
for (kk in 1:(mT-1)) {
numb <- which( xor(df$x==kk,df$x==(kk+1)) )
h = ifelse( max(df$y[numb]) - min(df$y[numb]) > 0, max(df$y[numb]) - min(df$y[numb]), 1)
k <- kde2d(df$x[numb], df$y[numb], h = c(1,h), n=c(2,100))
k$z <- k$z / max(k$z)
breaks <- 1:(length(r)+1)
breaks <- breaks / length(r)
image(k, col=r, breaks = breaks, add = TRUE)
}
}
axis(3,tck = tck_w,labels = FALSE)
axis(4,tck = tck_w,labels = FALSE)
lines(data_ave[1:(mT+1),1],data_ave[1:(mT+1),2],type = "l",lty = 1, lwd = 3, col = "#FF00FF")
legend(x = xl[2]-30, y = yl[2] * 0.97, c("average value",""), bty = "n", col = c("#FF00FF",NA),lty = c(1,NA),pch = c(NA,NA),pt.cex = 0.15,lwd = c(4,NA), horiz = TRUE)
save_fig(paste0("Figures/",nm2) )
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,70), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,64), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
x <- 1
xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
RP_AGAIN()
getwd()
library(stringr)
library(actuar)    # to use BIG NUMBERS in N_cell variable
source(file = "Code/tugHall_2.1_functions_tests.R")
## Create folders:  /Input, /Output and /Figures
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
##########################################################################################
### Files to output and input data
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
### Output/Weights.txt               # file with gene weights for hallmarks
##########################################################################################
# Probabilities of processes
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-12       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0        # Environmental death probability
d0 <<-  1.0   # Initial probability to divide cells
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
##########################################################################################
# if you have a new format of gene file, please, use change of columns function like:
# genefile <- changeCol(genefile)
### Making of the input file for initial clones
x <- 1
#xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
##########################################################################################
### Simulation of the cancer cell/clone evolution:
# model(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t)
# To repeat the 100 simulations and to mesure the time difference
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t, d0, rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
x <- 1
xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "M", lg = "Number of cells", xl = c(0,100), yl = c(0,2400), nm1 = "Fig_3.jpg", nm2 = "Fig_4.jpg" )
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "M", lg = "Number of cells", xl = c(0,100), yl = c(0,2400), nm1 = "Fig_3.jpg", nm2 = "Fig_4.jpg" )
getwd()
getwd()
library(stringr)
library(actuar)    # to use BIG NUMBERS in N_cell variable
source(file = "Code/tugHall_2.1_functions_tests.R")
## Create folders:  /Input, /Output and /Figures
mainDir <- getwd()
subDir <- "Output"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Input"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
subDir <- "Figures"
if (! file.exists(subDir)){  dir.create(file.path(mainDir, subDir)) }
##########################################################################################
### Files to output and input data
genefile <- 'Input/gene_cds2.txt'    # gene file
clonefile <- 'Input/cloneinit.txt'     # initial Cells
### Output files
geneoutfile <- 'Output/geneout.txt'  # Gene Out file with Hallmarks
cloneoutfile <- 'Output/cloneout.txt'  # output information of simulation
logoutfile <-  'Output/log.txt'      # log file to save the input information of simulation - "log.txt"
### Output/Weights.txt               # file with gene weights for hallmarks
##########################################################################################
# Probabilities of processes
E0 <<- 1E-10       # parameter in the division probability
F0 <<- 10        # parameter in the division probability
m0 <<-  1E-12       # mutation probability
uo <<- 0.5        # oncogene mutation probability
us <<- 0.5        # suppressor mutation probability
s0 <<-  10         # parameter in the sigmoid function
k0 <<-  0.5        # Environmental death probability
d0 <<-  1.0   # Initial probability to divide cells
### Additional parameters of simulation
censore_n <<- 30000       # Max cell number where the program forcibly stops
censore_t <<- 100         # Max time where the program forcibly stops
##########################################################################################
# if you have a new format of gene file, please, use change of columns function like:
# genefile <- changeCol(genefile)
### Making of the input file for initial clones
x <- 1
#xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz <- data.frame(V1=x,V2=as.character(""), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
#xz[1,2] <- "PIK3CA"
#xz[2,2] <- "APC"
#xz[3,2] <- "KRAS"
#xz[4,2] <- "TP53"
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
##########################################################################################
### Simulation of the cancer cell/clone evolution:
# model(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t)
# To repeat the 100 simulations and to mesure the time difference
Sys.setenv(TZ = "Japan")
print(Sys.timezone())
RP_AGAIN <- function()    {
st <- Sys.time()
print("The time at START:")
print( Sys.time() )
for (rp in 1:100 )  {
print(rp)
model_test(genefile, clonefile, geneoutfile, cloneoutfile, logoutfile, E0, F0, m0, uo, us, s0, k0, censore_n, censore_t, d0, rp)
}
print("The time at FINISH:")
print( Sys.time() )
nd <- Sys.time()
print(nd - st)
}
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "N", lg = "Number of cells", xl = c(0,64), yl = c(0,2000), nm1 = "Fig_1.jpg", nm2 = "Fig_2.jpg" )
x <- 1
xz <- data.frame(V1=x,V2=as.character("PIK3CA,APC,KRAS,TP53"), V3=rep.int(1000,length(x)))   # the id of clone, the genes, the number of cells in the clone
xz$V2 <- as.character(xz$V2)
write.table(xz,file = clonefile, col.names = FALSE,sep = "\t",row.names = FALSE)
RP_AGAIN()
source(file = "Code/Average_tests.R")
ave_plot(data_out = data_out, output = "M", lg = "Number of cells", xl = c(0,100), yl = c(0,2400), nm1 = "Fig_3.jpg", nm2 = "Fig_4.jpg" )
